---
/**
 * Blog listing page - Displays all blog posts from Sanity CMS
 * Uses the official Sanity template pattern
 */
import type { SanityDocument } from '@sanity/client'
import { Image } from 'astro:assets'
import { sanityClient } from 'sanity:client'
import imageUrlBuilder from '@sanity/image-url'
import type { SanityImageSource } from '@sanity/image-url/lib/types/types'
import groq from 'groq'
import Layout from '@/layouts/main.astro'

// GROQ query for all posts using the groq tag for proper typing
const POSTS_QUERY = groq`*[
  _type == "post"
  && defined(slug.current)
]|order(publishedAt desc){
  _id, 
  title, 
  slug, 
  excerpt,
  mainImage,
  publishedAt,
  "categories": categories[]->{ _id, title }
}`

// Query for categories
const CATEGORIES_QUERY = groq`*[_type == "category" && count(*[_type=="post" && references(^._id)]) > 0]{
  _id, 
  title
}`

// Fetch data using the Sanity client
const posts = await sanityClient.fetch<SanityDocument[]>(POSTS_QUERY)
const categories = await sanityClient.fetch<SanityDocument[]>(CATEGORIES_QUERY)

// Create image URL builder from Sanity client config
const { projectId, dataset } = sanityClient.config()

if (!projectId || !dataset) {
  throw new Error('Sanity client configuration not found')
}

const urlFor = (source: SanityImageSource) =>
  projectId && dataset
    ? imageUrlBuilder({ projectId, dataset }).image(source)
    : null

// Format date for display
const formatDate = (dateString: string) => {
  if (!dateString) return ''
  const options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }
  return new Date(dateString).toLocaleDateString(undefined, options)
}

// SEO metadata
const title = 'Blog | KP Infotech'
const description =
  'Latest insights on digital marketing, web development, and technology trends from KP Infotech.'
---

<Layout title={title} description={description}>
  <main class="container mx-auto min-h-screen max-w-4xl p-8">
    <div class="mb-8 flex items-center justify-between">
      <h1 class="text-4xl font-bold">Blog</h1>

      {/* Categories filter */}
      {
        categories.length > 0 && (
          <div class="flex flex-wrap gap-2">
            <a
              href="/blog"
              class="rounded-full bg-yellow-400/10 px-3 py-1 text-sm font-medium text-yellow-400 hover:bg-yellow-400/20"
            >
              All
            </a>
            {categories.map((category: any) => (
              <a
                href={`/blog/category/${category._id}`}
                class="rounded-full bg-gray-800 px-3 py-1 text-sm font-medium text-gray-300 hover:bg-gray-700"
              >
                {category.title}
              </a>
            ))}
          </div>
        )
      }
    </div>

    <ul class="flex flex-col gap-y-8">
      {
        posts.map((post) => (
          <li class="group">
            <a
              href={`/blog/${post.slug.current}`}
              class="flex flex-col gap-6 rounded-xl p-4 transition-colors hover:bg-gray-900/30 md:flex-row"
            >
              {/* Post image */}
              {post.mainImage && urlFor(post.mainImage) && (
                <div class="h-48 w-full flex-shrink-0 overflow-hidden rounded-xl md:w-48">
                  <Image
                    src={
                      urlFor(post.mainImage)?.width(400)?.height(300)?.url() ||
                      ''
                    }
                    alt={post.title}
                    width={400}
                    height={300}
                    class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
                    transition:name={`blog-${post.slug.current}`}
                    transition:persist
                  />
                </div>
              )}

              <div class="flex flex-col">
                <h2 class="text-2xl font-semibold transition-colors group-hover:text-yellow-400">
                  {post.title}
                </h2>

                {/* Post metadata */}
                <div class="mb-3 mt-2 flex items-center gap-4 text-sm text-gray-400">
                  <time datetime={post.publishedAt}>
                    {formatDate(post.publishedAt)}
                  </time>

                  {post.categories && post.categories.length > 0 && (
                    <div class="flex gap-2">
                      {post.categories.map((category: any) => (
                        <span class="text-yellow-400">{category.title}</span>
                      ))}
                    </div>
                  )}
                </div>

                {/* Post excerpt */}
                {post.excerpt && (
                  <p class="line-clamp-2 text-gray-300">{post.excerpt}</p>
                )}
              </div>
            </a>
          </li>
        ))
      }
    </ul>

    {
      posts.length === 0 && (
        <div class="py-12 text-center">
          <h2 class="mb-2 text-2xl font-semibold">No blog posts found</h2>
          <p class="text-gray-400">Check back soon for new content!</p>
        </div>
      )
    }
  </main>
</Layout>
