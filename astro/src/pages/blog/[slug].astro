---
/**
 * Individual blog post page that fetches content from Sanity CMS
 * Uses a simplified Sanity template approach
 */
import type { SanityDocument } from '@sanity/client'
import { Image } from 'astro:assets'
import { sanityClient } from 'sanity:client'
import imageUrlBuilder from '@sanity/image-url'
import type { SanityImageSource } from '@sanity/image-url/lib/types/types'
import { PortableText } from 'astro-portabletext'
import groq from 'groq'
import Layout from '@/layouts/main.astro'
import BlogUnavailable from '@/components/common/BlogUnavailable.astro'

// GROQ query for a single post with the groq tag for proper typing
const POST_QUERY = groq`*[_type == "post" && slug.current == $slug][0]{
  _id,
  title,
  slug,
  excerpt,
  mainImage,
  body,
  publishedAt,
  "author": author->{ _id, name, image, bio },
  "categories": categories[]->{ _id, title }
}`;

// Generate static paths at build time
export async function getStaticPaths() {
  // Query for all post slugs using groq for proper typing
  const SLUGS_QUERY = groq`*[_type == "post" && defined(slug.current)]{
    "params": {"slug": slug.current}
  }`;
  return await sanityClient.fetch(SLUGS_QUERY);
}

// Get params from path
const { slug } = Astro.params;

// Fetch the post using the Sanity pattern
const post = await sanityClient.fetch<SanityDocument>(POST_QUERY, { slug });

// Create image URL builder from Sanity client config
const { projectId, dataset } = sanityClient.config();
const urlFor = (source: SanityImageSource) =>
  projectId && dataset
    ? imageUrlBuilder({ projectId, dataset }).image(source)
    : null;

// Format the date for display using browser's locale
const formatDate = (dateString: string) => {
  if (!dateString) return ''
  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' }
  return new Date(dateString).toLocaleDateString(undefined, options)
}

const publishDate = post?.publishedAt ? formatDate(post.publishedAt) : ''
const postImageUrl = post?.mainImage && urlFor(post.mainImage) ? urlFor(post.mainImage)?.width(1200)?.height(630)?.url() : undefined

// SEO metadata
const title = post?.title ? `${post.title} | KP Infotech Blog` : 'Blog Post'
const description = post?.excerpt || post?.title || 'Read our latest blog post'

---

<Layout title={title} description={description}>
  {/* Only render if post exists */}
  <article class="max-w-4xl mx-auto py-10 px-4">

  {post ? (
      <header class="mb-12 text-center">
        {/* Categories */}
        {post.categories && post.categories.length > 0 && (
          <div class="flex flex-wrap justify-center gap-2 mb-4">
            {post.categories.map((category: SanityDocument) => (
              <a 
                href={`/blog?category=${category._id}`} 
                class="inline-block px-3 py-1 text-sm rounded-full bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transition-all"
              >
                {category.title}
              </a>
            ))}
          </div>
        )}

        {/* Post title */}
        <h1 class="text-3xl md:text-4xl font-bold mb-4">{post.title}</h1>
        
        {/* Author and date */}
        <div class="flex items-center justify-center gap-3 text-gray-500">
          {post.author && post.author.name && (
            <span class="flex items-center">
              {post.author.image && urlFor(post.author.image) && (
                <span class="w-6 h-6 rounded-full overflow-hidden mr-2">
                  <Image 
                    src={urlFor(post.author.image)?.width(50)?.height(50)?.url() || ''} 
                    alt={post.author.name}
                    class="w-full h-full object-cover"
                    width={50}
                    height={50}
                  />
                </span> 
              )}
              <span>{post.author.name}</span>
            </span>
          )}
          
          {publishDate && (
            <>
              <span class="mx-2">â€¢</span>
              <time datetime={post.publishedAt}>{publishDate}</time>
            </>
          )}
        </div>

        {/* Featured image */}
        {post.mainImage && urlFor(post.mainImage) && (
          <div class="mt-8 rounded-xl overflow-hidden">
            <Image 
              src={urlFor(post.mainImage)?.width(1200)?.height(630)?.url() || ''} 
              alt={post.title || 'Blog post feature image'}
              class="w-full h-auto object-cover"
              width="1200"
              height="630"
              transition:name={`blog-${post.slug.current}`}
              transition:persist
            />
          </div>
        )}
      </header>
      <main>
        {/* Excerpt if available */}
        {post.excerpt && (
          <div class="text-xl italic text-gray-500 mb-8 bg-gray-900 p-6 rounded-lg">
            {post.excerpt}
          </div>
        )}

        {/* Article content using standard Portable Text with Tailwind Typography */}
        <div class="prose prose-invert mx-auto max-w-none
                    prose-headings:font-bold prose-headings:text-white 
                    prose-h1:text-3xl prose-h1:mt-10 prose-h1:mb-6 prose-h1:font-bold prose-h1:text-purple-100 
                    prose-h2:text-2xl prose-h2:mt-8 prose-h2:mb-4 prose-h2:font-bold prose-h2:text-purple-300 
                    prose-h2:border-b prose-h2:border-purple-800/30 prose-h2:pb-2
                    prose-h3:text-xl prose-h3:mt-6 prose-h3:mb-3 prose-h3:font-semibold prose-h3:text-blue-200
                    prose-h4:text-lg prose-h4:mt-4 prose-h4:text-purple-200
                    prose-p:text-gray-300 
                    prose-a:text-purple-400 hover:prose-a:text-purple-300 prose-a:no-underline
                    prose-blockquote:border-l-purple-600 prose-blockquote:bg-gray-900/50 prose-blockquote:p-4 prose-blockquote:rounded-xl
                    prose-img:rounded-2xl
                    prose-code:text-purple-300 prose-code:bg-gray-900/50 prose-code:p-1 prose-code:rounded
                    prose-pre:bg-gray-900 prose-pre:rounded-2xl prose-pre:p-4">
          {Array.isArray(post.body) && <PortableText value={post.body} />}
          
          {/* Debug info - only shown if body isn't an array or is empty */}
          {(!Array.isArray(post.body) || post.body.length === 0) && (
            <div class="bg-red-900/30 p-6 rounded-lg mb-6">
              <h3 class="text-xl font-bold mb-2">Content Debug Information</h3>
              <p>The post body is not available in the expected format. Here's what we know:</p>
              <pre class="bg-black/50 p-4 mt-4 rounded overflow-x-auto text-xs">
                Post has body field: {post.body ? 'Yes' : 'No'}
                Is body an array: {Array.isArray(post.body) ? 'Yes' : 'No'}
                Available fields: {Object.keys(post).join(', ')}
              </pre>
            </div>
          )}
        </div>
      </main>
    ) : (
      <BlogUnavailable />
    )}

    {/* Tags */}
    <div class="mt-12 pt-6 border-t border-gray-800">
      <h3 class="text-lg font-bold mb-4">Tags</h3>
      <div class="flex flex-wrap gap-2">
        {post?.categories?.map((category: any) => (
          <a 
            href={`/blog/category/${category._id}`} 
            class="rounded-full bg-gray-800 px-3 py-1 text-sm text-gray-300 hover:bg-gray-700 transition-colors"
          >
            {category.title}
          </a>
        ))}
      </div>
    </div>
  </article>
</Layout>
